# syntax=docker/dockerfile:1.4

# based on https://github.com/devcontainers/images/tree/main/src/cpp
# [Choice (Only allowing Ubuntu distribution)] Ubuntu version (use Ubuntu 18.04/21.04 on local arm64/Apple Silicon): ubuntu-22.04, ubuntu-21.04, ubuntu-20.04, ubuntu-18.04
ARG VARIANT=ubuntu-22.04
FROM mcr.microsoft.com/devcontainers/cpp:${VARIANT} AS dev_container_base

RUN set -ex \
    cp /etc/apt/sources.list /etc/apt/sources.list.bak \
    && sed -i "s@http://.*.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g" /etc/apt/sources.list \
    && apt-get update && apt-get install --no-install-recommends -y apt-transport-https ca-certificates \
    && rm -rf /var/lib/apt/lists/* /var/cache/* /var/log/* /tmp/* ~/.cache -rf

FROM dev_container_base AS dev_containers_target_stage

USER root
COPY .devcontainer/scripts/* /tmp/staging/
RUN chmod -R 0700 /tmp/staging

# This Dockerfile exists a non-root 'vscode' user with sudo access. However, for Linux,
# this user's GID/UID must match your local user UID/GID to avoid permission issues
# with bind mounts. Update USER_UID / USER_GID if yours is not 1000. See
# https://aka.ms/vscode-remote/containers/non-root-user for details.
ARG USERNAME="vscode"
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Uncomment the below to create a new user different from 'vscode'
# RUN set -ex \
#     useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
#     &&  groupadd --gid $USER_GID $USERNAME \
#     #
#     # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
#     && apt-get update \
#     && apt-get install -y sudo \
#     && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
#     && chmod 0440 /etc/sudoers.d/$USERNAME

RUN apt-get update \
    && apt install --no-install-recommends -y git \
    #
    # Git proxy to access to github
    && git config --system url.https://ghproxy.com/https://github.com/.insteadOf https://github.com/ \
    #
    # Features scripts
    && git clone --depth=1 https://github.com/devcontainers/features.git /tmp/devcontainers/features  \
    #
    # Other features scripts
    && git clone --depth=1 https://github.com/msclock/features.git /tmp/msclock/features  \
    #
    # Accessible address substitution
    && find /tmp/ -type f | xargs sed -i 's@"https://\(github\|raw\.githubusercontent\).com/@"https://ghproxy.com/https://\1.com/@g' \
    && sed -i '/bootstrap-vcpkg.sh/i sed -i "s@https://github.com/@https://ghproxy.com/https://github.com/@g" "${VCPKG_ROOT}"\/bootstrap-vcpkg.sh' /tmp/msclock/features/src/vcpkg/main.sh \
    #
    # Install needed packages and setup the environment and non-root user
    && USERNAME="${USERNAME}" USERUID="${USER_UID}" USERGID="${USER_GID}" bash /tmp/devcontainers/features/src/common-utils/install.sh \
    #
    # Install Docker CLI and Engine for Docker-in-Docker
    && DOCKERDASHCOMPOSEVERSION="v2" MOBY="false" bash /tmp/devcontainers/features/src/docker-in-docker/install.sh \
    #
    # Install Python.
    && VERSION="system" INSTALLTOOLS="false" bash /tmp/devcontainers/features/src/python/install.sh \
    #
    # Install Vcpkg.
    && USERNAME="${USERNAME}" bash /tmp/msclock/features/src/vcpkg/install.sh \
    #
    # Install Kubectl, Helm and Minkikube.
    && VERSION="latest" HELM="latest" MINIKUBE="latest" bash /tmp/devcontainers/features/src/kubectl-helm-minikube/install.sh \
    #
    # Install the GitHub CLI.
    # && VERSION="latest" bash /tmp/devcontainers/features/src/github-cli/install.sh \
    #
    # Copy init scripts to /usr/local/share.
    && mv -f -t /usr/local/share/ /tmp/staging/devcontainer-init.sh \
    && chmod +x /usr/local/share/devcontainer-init.sh \
    && chown ${USERNAME}:root /usr/local/share/devcontainer-init.sh \
    #
    # Set permissions for workspace folder
    && mkdir -p /workspaces && chown ${USERNAME}:${USERNAME} /workspaces /home/${USERNAME} \
    #
    # Reset proxy and clean up
    && git config --system --unset url.https://ghproxy.com/https://github.com/.insteadOf \
    && rm -rf /var/lib/apt/lists/* /var/cache/* /var/log/* /tmp/* ~/.cache -rf

USER ${USERNAME}

ENV DOCKER_BUILDKIT=1
# Mount for docker-in-docker
VOLUME [ "/var/lib/docker" ]

# Initialize devcontainer script
ENTRYPOINT [ "/usr/local/share/devcontainer-init.sh" ]
CMD [ "sleep", "infinity" ]
